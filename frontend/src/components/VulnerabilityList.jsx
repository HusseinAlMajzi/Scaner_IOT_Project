import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { 
  AlertTriangle, 
  Search, 
  Filter, 
  ExternalLink,
  Calendar,
  Shield,
  Info,
  CheckCircle2,
  XCircle
} from 'lucide-react';

const VulnerabilityList = () => {
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [filteredVulnerabilities, setFilteredVulnerabilities] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [severityFilter, setSeverityFilter] = useState('all');
  const [sourceFilter, setSourceFilter] = useState('all');
  const [selectedVuln, setSelectedVuln] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [stats, setStats] = useState({
    total: 0,
    critical: 0,
    high: 0,
    medium: 0,
    low: 0
  });

  // Fetch vulnerabilities
  const fetchVulnerabilities = async () => {
    try {
      setIsLoading(true);
      const response = await fetch('/api/vulnerabilities');
      const data = await response.json();
      if (data.success) {
        setVulnerabilities(data.vulnerabilities);
        setFilteredVulnerabilities(data.vulnerabilities);
      }
    } catch (error) {
      console.error('Error fetching vulnerabilities:', error);
    } finally {
      setIsLoading(false);
    }
  };

  // Fetch vulnerability stats
  const fetchStats = async () => {
    try {
      const response = await fetch('/api/vulnerabilities/stats');
      const data = await response.json();
      if (data.success) {
        setStats(data.stats);
      }
    } catch (error) {
      console.error('Error fetching stats:', error);
    }
  };

  // Filter vulnerabilities
  useEffect(() => {
    let filtered = vulnerabilities;

    // Search filter
    if (searchTerm) {
      filtered = filtered.filter(vuln => 
        (vuln.cve_id && vuln.cve_id.toLowerCase().includes(searchTerm.toLowerCase())) ||
        vuln.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (vuln.recommendation && vuln.recommendation.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    // Severity filter
    if (severityFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.severity === severityFilter);
    }

    // Source filter
    if (sourceFilter !== 'all') {
      filtered = filtered.filter(vuln => vuln.source === sourceFilter);
    }

    setFilteredVulnerabilities(filtered);
  }, [searchTerm, severityFilter, sourceFilter, vulnerabilities]);

  useEffect(() => {
    fetchVulnerabilities();
    fetchStats();
  }, []);

  const getSeverityColor = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'bg-red-500 text-white';
      case 'high': return 'bg-orange-500 text-white';
      case 'medium': return 'bg-yellow-500 text-black';
      case 'low': return 'bg-green-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  const getSeverityIcon = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return XCircle;
      case 'high': return AlertTriangle;
      case 'medium': return Info;
      case 'low': return CheckCircle2;
      default: return Shield;
    }
  };

  const getSourceColor = (source) => {
    switch (source) {
      case 'NVD': return 'bg-blue-100 text-blue-800';
      case 'CVE': return 'bg-purple-100 text-purple-800';
      case 'Zero-day Feed': return 'bg-red-100 text-red-800';
      case 'IoT Security Check': return 'bg-green-100 text-green-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6" dir="rtl">
        <div className="max-w-7xl mx-auto">
          <div className="text-center py-12">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <p className="mt-4 text-gray-600">جاري تحميل الثغرات...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6" dir="rtl">
      <div className="max-w-7xl mx-auto space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 flex items-center">
              <AlertTriangle className="h-8 w-8 ml-3 text-red-600" />
              الثغرات الأمنية
            </h1>
            <p className="text-gray-600 mt-2">
              إجمالي {vulnerabilities.length} ثغرة مكتشفة
            </p>
          </div>
          <Button onClick={fetchVulnerabilities} className="bg-blue-600 hover:bg-blue-700">
            تحديث القائمة
          </Button>
        </div>

        {/* Statistics Cards */}
        <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
          <Card className="text-center">
            <CardHeader className="pb-2">
              <CardTitle className="text-2xl font-bold text-blue-600">
                {stats.total}
              </CardTitle>
              <CardDescription>إجمالي الثغرات</CardDescription>
            </CardHeader>
          </Card>
          
          <Card className="text-center border-red-200">
            <CardHeader className="pb-2">
              <CardTitle className="text-2xl font-bold text-red-600">
                {stats.critical}
              </CardTitle>
              <CardDescription>ثغرات حرجة</CardDescription>
            </CardHeader>
          </Card>
          
          <Card className="text-center border-orange-200">
            <CardHeader className="pb-2">
              <CardTitle className="text-2xl font-bold text-orange-600">
                {stats.high}
              </CardTitle>
              <CardDescription>ثغرات عالية</CardDescription>
            </CardHeader>
          </Card>
          
          <Card className="text-center border-yellow-200">
            <CardHeader className="pb-2">
              <CardTitle className="text-2xl font-bold text-yellow-600">
                {stats.medium}
              </CardTitle>
              <CardDescription>ثغرات متوسطة</CardDescription>
            </CardHeader>
          </Card>
          
          <Card className="text-center border-green-200">
            <CardHeader className="pb-2">
              <CardTitle className="text-2xl font-bold text-green-600">
                {stats.low}
              </CardTitle>
              <CardDescription>ثغرات منخفضة</CardDescription>
            </CardHeader>
          </Card>
        </div>

        {/* Search and Filter */}
        <Card>
          <CardContent className="pt-6">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="md:col-span-2 relative">
                <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
                <Input
                  placeholder="البحث في الثغرات (CVE ID، الوصف، التوصيات...)"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pr-10"
                />
              </div>
              
              <Select value={severityFilter} onValueChange={setSeverityFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="تصفية حسب الخطورة" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">جميع المستويات</SelectItem>
                  <SelectItem value="Critical">حرجة</SelectItem>
                  <SelectItem value="High">عالية</SelectItem>
                  <SelectItem value="Medium">متوسطة</SelectItem>
                  <SelectItem value="Low">منخفضة</SelectItem>
                </SelectContent>
              </Select>
              
              <Select value={sourceFilter} onValueChange={setSourceFilter}>
                <SelectTrigger>
                  <SelectValue placeholder="تصفية حسب المصدر" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">جميع المصادر</SelectItem>
                  <SelectItem value="NVD">NVD</SelectItem>
                  <SelectItem value="CVE">CVE</SelectItem>
                  <SelectItem value="Zero-day Feed">Zero-day</SelectItem>
                  <SelectItem value="IoT Security Check">فحص IoT</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Vulnerabilities List */}
        {filteredVulnerabilities.length === 0 ? (
          <Card>
            <CardContent className="text-center py-12">
              <Shield className="h-16 w-16 mx-auto mb-4 text-gray-400" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">لا توجد ثغرات</h3>
              <p className="text-gray-600">
                {searchTerm || severityFilter !== 'all' || sourceFilter !== 'all' 
                  ? 'لم يتم العثور على ثغرات تطابق المرشحات المحددة' 
                  : 'لم يتم اكتشاف أي ثغرات بعد'}
              </p>
            </CardContent>
          </Card>
        ) : (
          <div className="space-y-4">
            {filteredVulnerabilities.map((vuln) => {
              const SeverityIcon = getSeverityIcon(vuln.severity);
              
              return (
                <Card 
                  key={vuln.id} 
                  className="hover:shadow-lg transition-shadow cursor-pointer"
                  onClick={() => setSelectedVuln(vuln)}
                >
                  <CardContent className="pt-6">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center space-x-3 space-x-reverse mb-3">
                          <div className={`p-2 rounded-lg ${getSeverityColor(vuln.severity)}`}>
                            <SeverityIcon className="h-5 w-5" />
                          </div>
                          <div>
                            <h3 className="text-lg font-semibold text-gray-900">
                              {vuln.cve_id || 'ثغرة مخصصة'}
                            </h3>
                            <div className="flex items-center space-x-2 space-x-reverse mt-1">
                              <Badge className={getSeverityColor(vuln.severity)}>
                                {vuln.severity}
                              </Badge>
                              <Badge className={getSourceColor(vuln.source)}>
                                {vuln.source}
                              </Badge>
                              {vuln.cvss_score && (
                                <Badge variant="outline">
                                  CVSS: {vuln.cvss_score}
                                </Badge>
                              )}
                            </div>
                          </div>
                        </div>
                        
                        <p className="text-gray-700 mb-3 line-clamp-3">
                          {vuln.description}
                        </p>
                        
                        {vuln.recommendation && (
                          <div className="bg-blue-50 border border-blue-200 rounded-lg p-3 mb-3">
                            <h4 className="font-medium text-blue-900 mb-1">التوصية:</h4>
                            <p className="text-blue-800 text-sm line-clamp-2">
                              {vuln.recommendation}
                            </p>
                          </div>
                        )}
                        
                        <div className="flex items-center justify-between text-sm text-gray-500">
                          <div className="flex items-center space-x-4 space-x-reverse">
                            {vuln.published_date && (
                              <div className="flex items-center space-x-1 space-x-reverse">
                                <Calendar className="h-4 w-4" />
                                <span>نُشر: {new Date(vuln.published_date).toLocaleDateString('ar-SA')}</span>
                              </div>
                            )}
                            {vuln.affected_products && vuln.affected_products.length > 0 && (
                              <span>يؤثر على {vuln.affected_products.length} منتج</span>
                            )}
                          </div>
                          
                          <Button variant="outline" size="sm">
                            عرض التفاصيل
                          </Button>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        )}

        {/* Vulnerability Details Modal */}
        {selectedVuln && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <Card className="max-w-4xl w-full max-h-[90vh] overflow-y-auto">
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="text-xl flex items-center space-x-2 space-x-reverse">
                      <div className={`p-2 rounded-lg ${getSeverityColor(selectedVuln.severity)}`}>
                        {React.createElement(getSeverityIcon(selectedVuln.severity), { className: "h-5 w-5" })}
                      </div>
                      <span>{selectedVuln.cve_id || 'ثغرة مخصصة'}</span>
                    </CardTitle>
                    <div className="flex items-center space-x-2 space-x-reverse mt-2">
                      <Badge className={getSeverityColor(selectedVuln.severity)}>
                        {selectedVuln.severity}
                      </Badge>
                      <Badge className={getSourceColor(selectedVuln.source)}>
                        {selectedVuln.source}
                      </Badge>
                      {selectedVuln.cvss_score && (
                        <Badge variant="outline">
                          CVSS Score: {selectedVuln.cvss_score}
                        </Badge>
                      )}
                    </div>
                  </div>
                  <Button 
                    variant="outline" 
                    size="sm"
                    onClick={() => setSelectedVuln(null)}
                  >
                    إغلاق
                  </Button>
                </div>
              </CardHeader>
              
              <CardContent className="space-y-6">
                {/* Description */}
                <div>
                  <h4 className="font-medium text-gray-900 mb-2">وصف الثغرة</h4>
                  <p className="text-gray-700 leading-relaxed">{selectedVuln.description}</p>
                </div>

                {/* Recommendation */}
                {selectedVuln.recommendation && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">التوصيات والحلول</h4>
                    <div className="bg-green-50 border border-green-200 rounded-lg p-4">
                      <p className="text-green-800">{selectedVuln.recommendation}</p>
                    </div>
                  </div>
                )}

                {/* Affected Products */}
                {selectedVuln.affected_products && selectedVuln.affected_products.length > 0 && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">المنتجات المتأثرة</h4>
                    <div className="bg-gray-50 rounded-lg p-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                        {selectedVuln.affected_products.slice(0, 10).map((product, index) => (
                          <div key={index} className="text-sm text-gray-700 font-mono bg-white p-2 rounded">
                            {product}
                          </div>
                        ))}
                      </div>
                      {selectedVuln.affected_products.length > 10 && (
                        <p className="text-sm text-gray-500 mt-2">
                          و {selectedVuln.affected_products.length - 10} منتج آخر...
                        </p>
                      )}
                    </div>
                  </div>
                )}

                {/* References */}
                {selectedVuln.references && selectedVuln.references.length > 0 && (
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">المراجع والروابط</h4>
                    <div className="space-y-2">
                      {selectedVuln.references.slice(0, 5).map((ref, index) => (
                        <a 
                          key={index}
                          href={ref}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center space-x-2 space-x-reverse text-blue-600 hover:text-blue-800 text-sm"
                        >
                          <ExternalLink className="h-4 w-4" />
                          <span className="truncate">{ref}</span>
                        </a>
                      ))}
                    </div>
                  </div>
                )}

                {/* Metadata */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t">
                  <div>
                    <h4 className="font-medium text-gray-900 mb-2">معلومات إضافية</h4>
                    <div className="space-y-1 text-sm">
                      <div><strong>المصدر:</strong> {selectedVuln.source}</div>
                      {selectedVuln.nvd_id && (
                        <div><strong>NVD ID:</strong> {selectedVuln.nvd_id}</div>
                      )}
                      {selectedVuln.published_date && (
                        <div><strong>تاريخ النشر:</strong> {new Date(selectedVuln.published_date).toLocaleDateString('ar-SA')}</div>
                      )}
                      {selectedVuln.updated_date && (
                        <div><strong>آخر تحديث:</strong> {new Date(selectedVuln.updated_date).toLocaleDateString('ar-SA')}</div>
                      )}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityList;

