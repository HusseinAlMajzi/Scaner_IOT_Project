
from datetime import datetime
import uuid

from.import db

class Vulnerability(db.Model):
    __tablename__ = 'vulnerabilities'
    
    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    cve_id = db.Column(db.String(255), nullable=True, unique=True)
    nvd_id = db.Column(db.String(255), nullable=True)
    description = db.Column(db.Text, nullable=False)
    severity = db.Column(db.String(50), nullable=False)  # Critical, High, Medium, Low
    recommendation = db.Column(db.Text, nullable=True)
    source = db.Column(db.String(255), nullable=False)  # CVE, NVD, Zero-day
    published_date = db.Column(db.DateTime, nullable=True)
    updated_date = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Additional fields for better vulnerability tracking
    cvss_score = db.Column(db.Float, nullable=True)
    affected_products = db.Column(db.JSON, nullable=True)  # Store as JSON array
    references = db.Column(db.JSON, nullable=True)  # Store reference URLs as JSON
    
    # Relationships
    scan_results = db.relationship('ScanResult', backref='vulnerability', lazy=True)
    
    def to_dict(self):
        return {
            'id': self.id,
            'cve_id': self.cve_id,
            'nvd_id': self.nvd_id,
            'description': self.description,
            'severity': self.severity,
            'recommendation': self.recommendation,
            'source': self.source,
            'cvss_score': self.cvss_score,
            'affected_products': self.affected_products,
            'references': self.references,
            'published_date': self.published_date.isoformat() if self.published_date else None,
            'updated_date': self.updated_date.isoformat() if self.updated_date else None
        }
    
    def __repr__(self):
        return f'<Vulnerability {self.cve_id or self.id} - {self.severity}>'

